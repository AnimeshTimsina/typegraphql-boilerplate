# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BoolResponse {
  ok: Boolean!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreateUserInput {
  displayPicture: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: USER_ROLE!
}

"""The customer model"""
type Customer {
  address: String
  createdAt: DateTime!
  createdBy: User!
  description: String
  fullName: String!
  id: ID!
  phone: String
  updatedAt: DateTime!
  vat: Float
}

input CustomerInput {
  address: String
  description: String
  fullName: String!
  phone: String
  vat: Float
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeleteResponse {
  id: ID!
  success: Boolean!
}

input GetNewTokenInput {
  refreshToken: String!
}

type GetNewTokenResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Mutation {
  changePassword(ChangePassworInput: ChangePasswordInput!, userId: ID!): BoolResponse!
  createCustomer(CustomerInput: CustomerInput!): Customer!
  createProduct(ProductInput: ProductInput!): Product!
  createProductCategory(ProductCategoryInput: ProductCategoryInput!): ProductCategory!
  deleteCustomer(id: ID!): DeleteResponse!
  deleteProduct(id: ID!): DeleteResponse!
  deleteProductCategory(id: ID!): DeleteResponse!
  deleteUser(id: ID!): DeleteResponse!
  getNewToken(getNewTokenInput: GetNewTokenInput!): GetNewTokenResponse!
  login(LoginInput: LoginInput!): LoginResponse!
  registerUser(UserInput: CreateUserInput!): User!
  resetPassword(resetPasswordInput: ResetPasswordInput!): BoolResponse!
  revokeRefreshTokensForUser(userId: ID!): BoolResponse!
  sendPasswordResetMail(email: String!): BoolResponse!
  updateCustomer(CustomerInput: CustomerInput!, id: ID!): Customer!
  updateProduct(id: ID!, input: UpdateProductInput!): Product!
  updateProductCategory(ProductCategoryInput: ProductCategoryInput!, id: ID!): ProductCategory!
  updateUser(UpdateUserInput: UpdateUserInput!, id: ID!): User!
}

"""The product model"""
type Product {
  category: ProductCategory!
  description: String
  id: ID!
  photo: String
  price: Float
  title: String!
}

"""The product category model"""
type ProductCategory {
  id: ID!
  products: [Product!]!
  title: String!
}

input ProductCategoryInput {
  title: String!
}

input ProductInput {
  categoryID: ID!
  description: String
  photo: String
  price: Float
  title: String!
}

type Query {
  allCustomers: [Customer!]
  allProductCategories: [ProductCategory!]
  allProducts: [Product!]
  allUsers: [User!]
  getCustomer(id: ID!): Customer
  getProduct(id: ID!): Product
  getProductCategory(id: ID!): ProductCategory
  getUser(id: ID!): User
  me: User!
}

input ResetPasswordInput {
  confirmNewPassword: String!
  newPassword: String!
  token: String!
}

"""Type of user"""
enum USER_ROLE {
  ADMIN
  CLIENT
  STAFF
}

input UpdateProductInput {
  categoryID: ID
  description: String
  photo: String
  price: Float
  title: String
}

input UpdateUserInput {
  displayPicture: String
  firstName: String
  lastName: String
}

"""The user model"""
type User {
  createdAt: DateTime!
  customersCreated: [Customer!]!
  displayPicture: String
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  role: USER_ROLE!
  updatedAt: DateTime!
}
